<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.vincent.dao.master.MysqlDao">

    <select id="queryTmpCentlec" resultType="java.lang.Integer">
        select COUNT(1) from tmp_centlec where syn_date = #{sysDateString}
    </select>
    <select id="queryCurStaus" resultType="java.lang.String">
        select cur_dead_step from tmp_centlec where syn_date = #{sysDateString}
    </select>
    <insert id="insertTmpCentlec">
        insert into tmp_centlec(syn_date, cur_dead_step) values (#{sysDateString}, #{result})
    </insert>
    <update id="updateTmpCentlec">
        update tmp_centlec set cur_dead_step = #{result} where syn_date = #{sysDateString}
    </update>

    <delete id="deleteTmpData">
        delete from ${tmpTableName}
    </delete>
    <select id="queryTableSize" resultType="java.lang.Integer">
        select count(1) from ${tableName}
    </select>

    <select id="prepareTmp1ToDate" statementType="CALLABLE" parameterType="cn.vincent.pojo.ProcessParam" resultType="cn.vincent.pojo.ProcessParam">
        {CALL syn_0_1(
            #{error_code,mode=OUT,jdbcType=INTEGER},
            #{error_msg,mode=OUT,jdbcType=VARCHAR})}
    </select>
    <select id="prepareTmpToTmp1" statementType="CALLABLE" parameterType="cn.vincent.pojo.ProcessParam" resultType="cn.vincent.pojo.ProcessParam">
        {CALL syn_0_2(
            #{error_code,mode=OUT,jdbcType=INTEGER},
            #{error_msg,mode=OUT,jdbcType=VARCHAR}
        )}
    </select>

    <insert id="insertTmpBj" parameterType="java.util.List">
        insert into tmp_bj (
            MT_MODEL_DESC,MT_COMM_ADDR,station_id,
            LINE_ID,SUBURB_ID,MUS_TI,
            MUS_SGCID,MUS_KEYVISION,MUS_KEYEXPIRY,
            LASTVENDDATE,LASTVENDFREEDATE,TARIFFNAME,
            CUSTOMER_ID,MeterStatus)
        values
        <foreach collection="list" item="item" index="index" separator =",">
        (
            #{item.MT_MODEL_DESC,jdbcType=VARCHAR},
            #{item.MT_COMM_ADDR,jdbcType=VARCHAR},
            #{item.station_id,jdbcType=VARCHAR},
            #{item.LINE_ID,jdbcType=VARCHAR},
            #{item.SUBURB_ID,jdbcType=VARCHAR},
            #{item.MUS_TI,jdbcType=VARCHAR},
            #{item.MUS_SGCID,jdbcType=VARCHAR},
            #{item.MUS_KEYVISION,jdbcType=VARCHAR},
            #{item.MUS_KEYEXPIRY,jdbcType=VARCHAR},
            #{item.LASTVENDDATE,jdbcType=VARCHAR},
            #{item.LASTVENDFREEDATE,jdbcType=VARCHAR},
            #{item.TARIFFNAME,jdbcType=VARCHAR},
            #{item.CUSTOMER_ID,jdbcType=VARCHAR},
            #{item.MeterStatus,jdbcType=VARCHAR}
        )
        </foreach>
    </insert>
    <insert id="insertTmpYh" parameterType="java.util.List">
        insert into tmp_yh (
        CUSTOMER_ID,customer_name,STATUS,
        OPENACCOUNT_DATE,ADDRESS,StandNumber,
        LINKMAN_PHONE,Station_id,US_TI,
        US_IDNUM,US_EMAIL,US_ZIP,
        US_SEX,BANKACCOUNT,BUSINESS_REGISTRATION_NUMBER,
        TARIFFNAME
        )
        values
        <foreach collection="list" item="item" index="index" separator =",">
        (
            #{item.CUSTOMER_ID,jdbcType=VARCHAR},
            #{item.customer_name,jdbcType=VARCHAR},
            #{item.STATUS,jdbcType=VARCHAR},
            #{item.OPENACCOUNT_DATE,jdbcType=VARCHAR},
            #{item.ADDRESS,jdbcType=VARCHAR},
            #{item.StandNumber,jdbcType=VARCHAR},
            #{item.LINKMAN_PHONE,jdbcType=VARCHAR},
            #{item.Station_id,jdbcType=VARCHAR},
            #{item.US_TI,jdbcType=VARCHAR},
            #{item.US_IDNUM,jdbcType=VARCHAR},
            #{item.US_EMAIL,jdbcType=VARCHAR},
            #{item.US_ZIP,jdbcType=VARCHAR},
            #{item.US_SEX,jdbcType=VARCHAR},
            #{item.BANKACCOUNT,jdbcType=VARCHAR},
            #{item.BUSINESS_REGISTRATION_NUMBER,jdbcType=VARCHAR},
            #{item.TARIFFNAME,jdbcType=VARCHAR}
        )
        </foreach>
    </insert>
    <insert id="insertTmpZw" parameterType="java.util.List">
        insert into tmp_zw (
        DEBTID,CUSTOMER_ID,DEBTNM,
        Debt_total,Balance,DTYPE,
        MINPAY,PMONEYPCT,AMOUNTPCT,
        CREATE_DATE,LASTDATE,DebtType,
        PAYCTS,AGREE_ID,DebtStatus
        )
        values
        <foreach collection="list" item="item" index="index" separator =",">
        (
            #{item.DEBTID,jdbcType=VARCHAR},
            #{item.CUSTOMER_ID,jdbcType=VARCHAR},
            #{item.DEBTNM,jdbcType=VARCHAR},
            #{item.Debt_total,jdbcType=VARCHAR},
            #{item.Balance,jdbcType=VARCHAR},
            #{item.DTYPE,jdbcType=VARCHAR},
            #{item.MINPAY,jdbcType=VARCHAR},
            #{item.PMONEYPCT,jdbcType=VARCHAR},
            #{item.AMOUNTPCT,jdbcType=VARCHAR},
            #{item.CREATE_DATE,jdbcType=TIMESTAMP},
            #{item.LASTDATE,jdbcType=VARCHAR},
            #{item.DebtType,jdbcType=VARCHAR},
            #{item.PAYCTS,jdbcType=VARCHAR},
            #{item.AGREE_ID,jdbcType=VARCHAR},
            #{item.DebtStatus,jdbcType=VARCHAR}
        )
        </foreach>
    </insert>

    <select id="queryMaxLastVendDate" resultType="java.lang.String">
        select max(lastvenddate) from tmp_bj1
    </select>
    <insert id="insertTmpLjz" parameterType="java.util.List">
        insert into tmp_ljz (
        energy,MT_COMM_ADDR,LASTVENDDATE,ISFREE, ISUSED
        )
        values
        <foreach collection="list" item="item" index="index" separator =",">
        (
            #{item.energy,jdbcType=VARCHAR},
            #{item.MT_COMM_ADDR,jdbcType=VARCHAR},
            #{item.LASTVENDDATE,jdbcType=VARCHAR},
            #{item.ISFREE,jdbcType=VARCHAR},
            #{item.ISUSED,jdbcType=VARCHAR}
        )
        </foreach>
    </insert>

    <select id="queryTiChangedNum" resultType="java.lang.Integer">
        select count(1) from tmp_yh t,tmp_yh1 t1
        where t.customer_id = t1.customer_id
        and t.us_ti &lt;&gt; t1.us_ti
    </select>
    <select id="queryYhWithTariffChanged" resultType="cn.vincent.pojo.TmpYhChangedTariff">
        SELECT yh.*,yh1.tariffname AS tariffnameold
        FROM tmp_yh yh INNER JOIN tmp_yh1 yh1
        ON yh.customer_id = yh1.customer_id AND yh.tariffname &lt;&gt; yh1.tariffname
    </select>
    <select id="queryYhWithDwChanged" resultType="cn.vincent.pojo.TmpYhChangedDw">
        SELECT yh.*,yh1.station_id AS station_idold
        FROM tmp_yh yh INNER JOIN tmp_yh1 yh1
        ON yh.customer_id = yh1.customer_id AND yh1.station_id &lt;&gt; yh.station_id
    </select>
    <select id="executeScript1" statementType="CALLABLE" parameterType="cn.vincent.pojo.ProcessParam" resultType="cn.vincent.pojo.ProcessParam">
        {CALL syn_1(
            #{error_code,mode=OUT,jdbcType=INTEGER},
            #{error_msg,mode=OUT,jdbcType=VARCHAR}
        )}
    </select>
    <select id="queryDwNullNum" resultType="java.lang.Integer">
        select count(1) from a_consumer cons where cons.org_no is null
    </select>

    <select id="queryBjWithVkChanged" resultType="cn.vincent.pojo.TmpBjChangedVk">
        SELECT  bj.*,
                bj1.mus_sgcid as mus_sgcidold,
                bj1.mus_keyvision as mus_keyvisionold,
                bj1.mus_keyexpiry as mus_keyexpiryold
		FROM tmp_bj bj INNER JOIN tmp_bj1 bj1 ON bj.mt_comm_addr=bj1.mt_comm_addr
		AND (bj1.mus_sgcid &lt;&gt; bj.mus_sgcid or bj1.mus_keyvision &lt;&gt; bj.mus_keyvision or bj1.mus_keyexpiry &lt;&gt; bj.mus_keyexpiry)
    </select>
    <select id="queryBjWithTiChanged" resultType="cn.vincent.pojo.TmpBjChangedTi">
        SELECT bj.*,bj1.mus_ti AS mus_tiold
		FROM tmp_bj bj INNER JOIN tmp_bj1 bj1 ON bj.mt_comm_addr=bj1.mt_comm_addr AND bj1.mus_ti &lt;&gt; bj.mus_ti
    </select>
    <select id="executeScript2" statementType="CALLABLE" parameterType="cn.vincent.pojo.ProcessParam" resultType="cn.vincent.pojo.ProcessParam">
        {CALL syn_2(
            #{error_code,mode=OUT,jdbcType=INTEGER},
            #{error_msg,mode=OUT,jdbcType=VARCHAR}
        )}
    </select>

    <select id="queryYhWithStatusChanged" resultType="cn.vincent.pojo.TmpYhChangedStatus">
        SELECT  yh.*,
                yh1.status AS statusold,
		        (SELECT MT_COMM_ADDR FROM tmp_bj bj WHERE bj.customer_id=yh.customer_id) MT_COMM_ADDR,
		        (SELECT MT_COMM_ADDR FROM tmp_bj bj1 WHERE bj1.customer_id=yh1.customer_id) MT_COMM_ADDRold
		FROM tmp_yh yh INNER JOIN tmp_yh1 yh1 ON yh.customer_id = yh1.customer_id AND yh1.status &lt;&gt; yh.status
    </select>
    <select id="queryNewYh" resultType="cn.vincent.pojo.TmpYh">
        SELECT a.*
        FROM tmp_yh a
	    WHERE NOT EXISTS(SELECT cons.CONS_NO FROM a_consumer cons WHERE CONCAT('yh_',a.customer_id) = cons.CONS_NO)
    </select>
    <select id="executeScript3_1" statementType="CALLABLE" parameterType="cn.vincent.pojo.ProcessParam" resultType="cn.vincent.pojo.ProcessParam">
        {CALL syn_3_1(
            #{error_code,mode=OUT,jdbcType=INTEGER},
            #{error_msg,mode=OUT,jdbcType=VARCHAR}
        )}
    </select>

    <select id="queryBjWithCustidChanged" resultType="cn.vincent.pojo.TmpBjChangedCustid">
        SELECT  bj.*,
                bj1.customer_id AS customer_idold
        FROM tmp_bj bj INNER JOIN tmp_bj1 bj1 ON bj1.mt_comm_addr = bj.mt_comm_addr
			AND bj1.customer_id &lt;&gt; bj.customer_id
    </select>
    <select id="executeScript3_2" statementType="CALLABLE" parameterType="cn.vincent.pojo.ProcessParam" resultType="cn.vincent.pojo.ProcessParam">
        {CALL syn_3_2(
            #{error_code,mode=OUT,jdbcType=INTEGER},
            #{error_msg,mode=OUT,jdbcType=VARCHAR}
        )}
    </select>

    <select id="queryBjDeleted" resultType="cn.vincent.pojo.TmpBj">
        SELECT bj1.*
        FROM tmp_bj1 bj1
	    WHERE NOT EXISTS(SELECT bj.mt_comm_addr FROM tmp_bj bj WHERE bj.mt_comm_addr = bj1.mt_comm_addr)
    </select>
    <select id="executeScript3_3" statementType="CALLABLE" parameterType="cn.vincent.pojo.ProcessParam" resultType="cn.vincent.pojo.ProcessParam">
        {CALL syn_3_3(
            #{error_code,mode=OUT,jdbcType=INTEGER},
            #{error_msg,mode=OUT,jdbcType=VARCHAR}
        )}
    </select>
    <select id="executeScript4" statementType="CALLABLE" parameterType="cn.vincent.pojo.ProcessParam" resultType="cn.vincent.pojo.ProcessParam">
        {CALL syn_4(
            #{error_code,mode=OUT,jdbcType=INTEGER},
            #{error_msg,mode=OUT,jdbcType=VARCHAR}
        )}
    </select>
    <select id="executeScript5_1" statementType="CALLABLE" parameterType="cn.vincent.pojo.ProcessParam" resultType="cn.vincent.pojo.ProcessParam">
        {CALL syn_5_1(
            #{error_code,mode=OUT,jdbcType=INTEGER},
            #{error_msg,mode=OUT,jdbcType=VARCHAR}
        )}
    </select>
    <select id="executeScript5_2" statementType="CALLABLE" parameterType="cn.vincent.pojo.ProcessParam" resultType="cn.vincent.pojo.ProcessParam">
        {CALL syn_5_2(
            #{error_code,mode=OUT,jdbcType=INTEGER},
            #{error_msg,mode=OUT,jdbcType=VARCHAR}
        )}
    </select>
    <select id="executeScript6" statementType="CALLABLE" parameterType="cn.vincent.pojo.ProcessParam" resultType="cn.vincent.pojo.ProcessParam">
        {CALL syn_6(
            #{error_code,mode=OUT,jdbcType=INTEGER},
            #{error_msg,mode=OUT,jdbcType=VARCHAR}
        )}
    </select>


    <update id="updateTmpWithNewIds">
        update tmp_ljz a
        INNER JOIN (select b.assetno as "meterNo", b.METER_ID as "meterId", d.CONS_ID as "consId"
                    from A_EQUIP_METER b
                    INNER JOIN a_mp_equipment_rela c on b.METER_ID = c.EQUIPMENTID and c.EQUIPMENTTYPE = '02'
                    INNER JOIN a_usagepoint d on c.MP_ID = d.MP_ID
                    ) tb on a.mt_comm_addr  = tb.meterNo
        SET a.meterId = tb.meterId, a.consId = tb.consId
    </update>
    <update id="updateTmpWithOldTmp">
        UPDATE tmp_ljz a
        INNER JOIN tmp_ljz1 aa
        ON a.mt_comm_addr = aa.mt_comm_addr AND a.isfree = aa.isfree AND TO_DAYS(a.lastvenddate) = TO_DAYS(aa.lastvenddate)
        SET a.energy_old = aa.energy, a.MT_COMM_ADDR_old = aa.mt_comm_addr,
        a.LASTVENDDATE_old = aa.LASTVENDDATE, a.ISFREE_old = aa.ISFREE, a.ISUSED_old = aa.ISUSED
    </update>
    <update id="updateEnergyByOldRows">
        UPDATE tmp_ljz SET energy = ROUND(energy - energy_old, 2), energy_old = 0 WHERE MT_COMM_ADDR_old IS NOT NULL AND ISUSED_old = 1
    </update>
    <!--插入阶梯-->
    <update id="updateUsedInsertStep">
        update tmp_ljz a set a.ISUSED = 1
        where a.ISFREE = 0 and a.ISUSED = 0 and
        NOT EXISTS (select 1 from vd_c_cumu_value b
        where b.cumu_obj = '03' and b.cumu_obj_id = a.meterId
        and a.LASTVENDDATE <![CDATA[ >= ]]>  b.start_time and a.LASTVENDDATE <![CDATA[ <= ]]> b.end_time)
    </update>
    <insert id="insertStepBatch">
        INSERT INTO VD_C_CUMU_VALUE
            (LESSEE_ID,	CUMU_ID, RULE_ID, CUMU_OBJ,	CUMU_OBJ_ID, CUMU_ITEM,	START_TIME,	END_TIME, CUMU_VALUE, VALUE_UNIT)
        SELECT
            2, AMI_GET_SEQUENCE('SEQ_VD_C_CUMU_VALUE'), NULL, '03', a.meterId, '0301',
            DATE_ADD(DATE_FORMAT(a.LASTVENDDATE, '%Y-%m-%d'), INTERVAL -DAY(a.LASTVENDDATE) + 1 DAY), LAST_DAY(a.LASTVENDDATE),
            a.energy, 'KWH'
        FROM tmp_ljz a
        where a.ISFREE = 0 and a.ISUSED = 1 and
        NOT EXISTS (select 1 from vd_c_cumu_value b
        where b.cumu_obj = '03' and b.cumu_obj_id = a.meterId
        and a.LASTVENDDATE <![CDATA[ >= ]]>  b.start_time and a.LASTVENDDATE <![CDATA[ <= ]]> b.end_time)
    </insert>
    <!--更新阶梯-->
    <update id="updateUsedUpdateStep">
        UPDATE tmp_ljz ljz
        INNER JOIN vd_c_cumu_value cumu  ON cumu.cumu_obj = '03' AND ljz.meterId = cumu.cumu_obj_id AND ljz.isfree = 0 AND ljz.isused = 0
            AND ljz.LASTVENDDATE <![CDATA[ >= ]]>  cumu.start_time AND ljz.LASTVENDDATE <![CDATA[ <= ]]> cumu.end_time
        SET ljz.isused = 1
    </update>
    <update id="updateStepBatch">
        UPDATE vd_c_cumu_value cumu
        INNER JOIN tmp_ljz ljz ON cumu.cumu_obj = '03' AND ljz.meterId = cumu.cumu_obj_id AND ljz.isfree = 0 AND ljz.isused = 1
            AND ljz.LASTVENDDATE <![CDATA[ >= ]]>  cumu.start_time AND ljz.LASTVENDDATE <![CDATA[ <= ]]> cumu.end_time
        SET cumu.cumu_value = ROUND(cumu.cumu_value + ljz.energy, 2)
    </update>
    <!--插入FBE-->
    <update id="updateUsedInsertFbe">
        UPDATE tmp_ljz a SET a.ISUSED = 1
        WHERE a.ISFREE = 1 AND a.ISUSED = 0 AND
        NOT EXISTS (SELECT 1 FROM vd_c_cumu_value b
        WHERE b.cumu_obj = '01' AND b.cumu_obj_id = a.consId
        AND a.LASTVENDDATE <![CDATA[ >= ]]>  b.start_time AND a.LASTVENDDATE <![CDATA[ <= ]]> b.end_time)
    </update>
    <insert id="insertFbeBatch">
        INSERT INTO vd_c_cumu_value
            (lessee_id, cumu_id, rule_id, cumu_obj, cumu_obj_id, cumu_item, start_time, end_time, cumu_value, value_unit)
        SELECT
            2, AMI_GET_SEQUENCE('SEQ_VD_C_CUMU_VALUE'), NULL, '01', a.consId, '0101',
            DATE_ADD(DATE_FORMAT(a.LASTVENDDATE, '%Y-%m-%d'), INTERVAL -DAY(a.LASTVENDDATE) + 1 DAY), LAST_DAY(a.LASTVENDDATE),
            a.energy, 'KWH'
        FROM tmp_ljz a
        WHERE a.ISFREE = 1 AND a.ISUSED = 1 AND
        NOT EXISTS (SELECT 1 FROM vd_c_cumu_value b
        WHERE b.cumu_obj = '01' AND b.cumu_obj_id = a.consId
        AND a.LASTVENDDATE <![CDATA[ >= ]]>  b.start_time AND a.LASTVENDDATE <![CDATA[ <= ]]> b.end_time)
    </insert>
    <!--更新FBE-->
    <update id="updateUsedUpdateFbe">
        UPDATE tmp_ljz ljz
        INNER JOIN vd_c_cumu_value cumu ON cumu.cumu_obj = '01' AND ljz.consId = cumu.cumu_obj_id AND ljz.isfree = 1 AND ljz.isused = 0
            AND ljz.LASTVENDDATE <![CDATA[ >= ]]>  cumu.start_time AND ljz.LASTVENDDATE <![CDATA[ <= ]]> cumu.end_time
        SET ljz.isused = 1
    </update>
    <update id="updateFbeBatch">
        UPDATE vd_c_cumu_value cumu
        INNER JOIN tmp_ljz ljz ON cumu.cumu_obj = '01' AND ljz.consId = cumu.cumu_obj_id AND ljz.isfree = 1 AND ljz.isused = 1
            AND ljz.LASTVENDDATE <![CDATA[ >= ]]>  cumu.start_time AND ljz.LASTVENDDATE <![CDATA[ <= ]]> cumu.end_time
        SET cumu.cumu_value = ljz.energy
    </update>





















    <!--    <select id="queryTmpLjzWithIdOld" resultType="cn.vincent.pojo.TmpLjzWithIdOld">-->
    <!--        select a.*, b.METER_ID "meterId", d.CONS_ID "consId",-->
    <!--			aa.energy "energy_old", aa.mt_comm_addr "MT_COMM_ADDR_old",-->
    <!--			aa.LASTVENDDATE "LASTVENDDATE_old", aa.ISFREE "ISFREE_old",-->
    <!--			aa.ISUSED "ISUSED_old"-->
    <!--        from tmp_ljz a-->
    <!--        INNER JOIN A_EQUIP_METER b on a.mt_comm_addr  = b.assetno-->
    <!--        INNER JOIN a_mp_equipment_rela c on b.METER_ID = c.EQUIPMENTID and c.EQUIPMENTTYPE = '02'-->
    <!--        INNER JOIN a_usagepoint d on c.MP_ID = d.MP_ID-->
    <!--        LEFT JOIN tmp_ljz1 aa on a.mt_comm_addr = aa.mt_comm_addr and a.isfree = aa.isfree and TO_DAYS(a.lastvenddate) = TO_DAYS(aa.lastvenddate)-->
    <!--        where a.ISUSED = 0-->
    <!--    </select>-->

<!--
    <select id="queryExistCumu" resultType="java.lang.Integer">
        select count(1) from vd_c_cumu_value
        where cumu_obj = #{cumuObj} and cumu_obj_id = #{cumuObjId}
        and #{cumuDate} <![CDATA[ >= ]]> start_time and #{cumuDate} <![CDATA[ <= ]]> end_time
    </select>
    <insert id="insertFbeVdCcumuValue">
        INSERT INTO vd_c_cumu_value
            (lessee_id, cumu_id, rule_id, cumu_obj, cumu_obj_id, cumu_item, start_time, end_time, cumu_value, value_unit)
        VALUES
            (2, AMI_GET_SEQUENCE('SEQ_VD_C_CUMU_VALUE'), NULL, '01', #{consId}, '0101',
            DATE_ADD(#{cumuDate}, INTERVAL -DAY(#{cumuDate}) + 1 DAY), LAST_DAY(#{cumuDate}),
            #{cumuValue}, 'KWH')
    </insert>
    <insert id="insertStepVdCcumuValue">
        INSERT INTO VD_C_CUMU_VALUE
            (LESSEE_ID,	CUMU_ID, RULE_ID, CUMU_OBJ,	CUMU_OBJ_ID, CUMU_ITEM,	START_TIME,	END_TIME, CUMU_VALUE, VALUE_UNIT)
        VALUES
            (2, AMI_GET_SEQUENCE('SEQ_VD_C_CUMU_VALUE'), NULL, '03', #{meterId}, '0301',
            DATE_ADD(#{cumuDate}, INTERVAL -DAY(#{cumuDate}) + 1 DAY), LAST_DAY(#{cumuDate}),
            #{cumuValue}, 'KWH')
    </insert>
    <update id="updateFbeVdCcumuValue">
        UPDATE vd_c_cumu_value SET cumu_value = #{cumuValue}
        WHERE cumu_obj = '01' AND cumu_item = '0101' AND cumu_obj_id = #{consId}
        and #{cumuDate} <![CDATA[ >= ]]> start_time and #{cumuDate} <![CDATA[ <= ]]> end_time
    </update>
    <update id="updateStepVdCcumuValue">
        UPDATE VD_C_CUMU_VALUE SET CUMU_VALUE = CUMU_VALUE + #{cumuValueOffset}
        WHERE CUMU_OBJ = '03' AND CUMU_ITEM = '0301' AND CUMU_OBJ_ID = #{meterId}
        and #{cumuDate} <![CDATA[ >= ]]> start_time and #{cumuDate} <![CDATA[ <= ]]> end_time
    </update>
-->
    <select id="queryTmpLjzYestoday" resultType="cn.vincent.pojo.TmpLjz">
        select 	t.RECHARGE_AMOUNT as "energy",
				t.meter_no as "MT_COMM_ADDR",
				t.CREATE_TIME as "LASTVENDDATE",
				(case when t.TOKEN_TYPE = '0101' then 0 else 1 end) as "ISFREE",
				'0' as "ISUSED"
        from vd_p_token t
        where  t.TOKEN_TYPE in ('0101', '0103') and TO_DAYS(t.CREATE_TIME) = TO_DAYS(#{cumuDate})
    </select>

</mapper>